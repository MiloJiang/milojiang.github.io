[{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go"},{"content":"","date":null,"permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang"},{"content":"","date":null,"permalink":"/categories/golang/","section":"Categories","summary":"","title":"Golang"},{"content":"","date":null,"permalink":"/categories/grafan/","section":"Categories","summary":"","title":"Grafan"},{"content":"","date":null,"permalink":"/post/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/%E5%8D%9A%E5%AE%A2/","section":"Tags","summary":"","title":"博客"},{"content":"","date":null,"permalink":"/categories/%E5%BC%80%E5%8F%91/","section":"Categories","summary":"","title":"开发"},{"content":"","date":null,"permalink":"/","section":"很高兴遇见你","summary":"","title":"很高兴遇见你"},{"content":"试用 Grafana 搭建监控系统 #概要 #Grafana 是一个用来从数据源获取数据进行展示的监控平台，有开源版本和企业版可供选用\n安装 #$ brew update $ brew install grafana 启动 #如果使用 brew 进行安装，也需要使用brew进行启动\n$ brew tap homebrew/services $ brew services start grafana 执行成功可以看到如下的输出\n==\u0026gt; Successfully started `grafana` (label: homebrew.mxcl.grafana) 通过 http://localhost:3000 就可以访问了，默认的登录用户和密码都是 admin\n配置 #默认的配置文件在 /usr/local/etc/grafana/grafana.ini\n试用 #登入系统后，会提示你\n","date":"2019 27 27","permalink":"/post/%E8%AF%95%E7%94%A8-grafana-%E6%90%AD%E5%BB%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/","section":"Posts","summary":"试用 Grafana 搭建监控系统 #概要 #Grafana 是一个用来从数据源获取数据进行展示的监控平台，有开源版本和企业版可供选用","title":"试用 Grafana 搭建监控系统"},{"content":"Full Stack Engineer | 全栈工程师 #从业 20 年，略懂各种技术\n","date":"2019 21 21","permalink":"/about/","section":"很高兴遇见你","summary":"Full Stack Engineer | 全栈工程师 #从业 20 年，略懂各种技术","title":"关于我"},{"content":"","date":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"使用 Hugo 搭建个人博客 #Hugo 是一个用 Golang 编写的静态网页生成工具，可以用来制作静态网站。用这个工具配合 Github Pages 服务，我们可以非常轻松的搭建个人博客。\n准备 #我们需要安装 Hugo，这是一个命令行工具。在 Mac 下，我们可以使用 brew 进行安装\n$ brew install hugo 为了验证我们安装，我们可以在终端下 执行 hugo version\n$ hugo version Hugo Static Site Generator v0.55.6/extended darwin/amd64 BuildDate: unknown 接下来我们需要创建一个Hugo项目，你可以用 Github 来存储这个项目也可以使用别的服务商。这里我使用了 Github。\n小试 Hugo #使用 Hugo 的命令创建一个工程\n$ hugo new site myblog 成功执行后，我们可以看到 hugo 生成了一个名为 myblog 的文件夹，这个就是我们的 Hugo 项目了。\n此时的项目还是一个空工程，还需要下载和设置皮肤才可以看到效果\n$ cd myblog/themes $ git clone https://github.com/htdvisser/hugo-base16-theme.git base16 打开 myblog/config.toml 增加一行关于皮肤的设置\ntheme = \u0026#34;base16\u0026#34; 执行本地服务\n$ hugo server 应该可以看到类似的画面了\n配置 Github #在 Github 上建立个人的主页项目，根据 Github 的规则，项目的名字需要跟 Github 的名字一致。项目的链接类似如下的形式：\nhttps://\u0026lt;USERNAME\u0026gt;.github.io/ 此项目会被 Github 默认当做行的主页。Github Page 默认会跟 master 分支进行关联，可以在 Setting 中修改。\n接下来，删除我们 Hugo项目中存在 public/ 文件夹\n将 public 和 Github上的个人主页项目进行关联：\n$ git submodule add -b master git@github.com:\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io.git public 经过了这一步，我们将 public 下的内容和我们 Github 上个人主页项目做了关联。我们可以在生成 public 内容后，手动更新到 Github 上。为了使整个流程自动化，我们可以使用脚本。在我们建立的 Hugo 项目的根目录下创建一个脚本 deploy.sh\n#!/bin/sh # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; # Build the project. hugo # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master 为这个脚本添加可执行权限\n$ chmod a+x deploy.sh 这样我们每次增加文章时，只需要执行 deploy.sh 就可以了\n增加文章 #hugo 为我们提供了命令可以方便的增加内容\n$ hugo new posts/my-first-post.md 你当然也可以手动在 content/posts/ 下添加文件\n这里要特别说明的是静态图片，hugo 提供了静态图片的统一存储地址 static ，凡是放在 static 下的内容，都会在部署后通过 url 被访问到，例如 static/image.png 文件在部署后，可以通过 http://{server-url}/image.png 访问到。\n参考 #https://gohugo.io/getting-started/quick-start/\nhttps://gohugo.io/hosting-and-deployment/hosting-on-github/#readout\n","date":"2019 21 21","permalink":"/post/%E4%BD%BF%E7%94%A8-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","section":"Posts","summary":"使用 Hugo 搭建个人博客 #Hugo 是一个用 Golang 编写的静态网页生成工具，可以用来制作静态网站。用这个工具配合 Github Pages 服务，我们可以非常轻松的搭建个人博客。","title":"使用 Hugo 搭建个人博客"},{"content":"","date":null,"permalink":"/categories/%E4%BA%A7%E5%93%81/","section":"Categories","summary":"","title":"产品"},{"content":"很高兴遇见你 #熊密是我们独立创新的产品，旨在帮助iPhone用户更好的记录和保护自己的隐私(照片，日记)，欢迎大家下载体验。您如果有任何的使用建议和意见，可以扫描二维码与我们联系。\n如果你有什么建议，也可以通过 AppStore 留言，或者在 github 上提 issue 。\n祝好~\n","date":"2019 01 01","permalink":"/post/my-first-post/","section":"Posts","summary":"很高兴遇见你 #熊密是我们独立创新的产品，旨在帮助iPhone用户更好的记录和保护自己的隐私(照片，日记)，欢迎大家下载体验。您如果有任何的使用建议和意见，可以扫描二维码与我们联系。","title":"很高兴遇见你"},{"content":"","date":null,"permalink":"/categories/%E6%AC%A2%E8%BF%8E/","section":"Categories","summary":"","title":"欢迎"},{"content":"","date":null,"permalink":"/tags/%E7%86%8A%E5%AF%86/","section":"Tags","summary":"","title":"熊密"},{"content":"","date":null,"permalink":"/categories/%E7%86%8A%E5%AF%86/","section":"Categories","summary":"","title":"熊密"}]